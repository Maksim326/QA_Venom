Introduction. 

This Proposal outlines the design and implementation of an QA Automation Test Framework for Data Flow testing. The framework will ensure that each step in the pipeline is verified  during execution while allowing seamless execution in production without tests  

  

Objective 

Automation tests for key pipeline steps(file received, file upload, raw table validation, transformation steps) 

Centralize all test logic in a dedicated repository 

Ensure that tests run only during CI/CD execution while being skipped in Production 

Use GitHub Actions for continuous integration and deployment 

  

Overview  

The framework consists of 3 GitHub repositories: 

DataPlatform-OrchestrationFunction for Azure functions 

DataPlatform-Python - all pipeline steps and pipeline validations 

QA  Automation Test Framework( not created yet) 

  

Implementation Steps: 

Test Decorators  

All test decorators are implemented in the QA  Automation Test Framework repository. They will be referenced in the Pipeline Repositories  (Overview 1 and 2)  but will be skipped in production 

Test files: 

Test files will be stored in dedicated blob storage and will be used for test execution 

Test files will be uploaded to inbound folder (azure function will provide us information about test file location construct_event_data) 

Referencing Decorators in Pipeline Repositories 

Decorator(s) will be added to all functions(steps) in Pipeline Repositories. If decorators are not found (in case of Prod run), a fallback mechanism will disable them 

GitHub Actions Integration. 

GitHub Actions will automate the testing Process 

Deploy Pipeline Repositories  

If Test repository is available, it loads decorators and executes tests 

If running in Production, tests are skipped 

Skipping tests in Production 

If running in a Production environment, decorators will not be applied 

The Pipeline will execute without interruption from tests 

  

Framework Benefits: 

Automation- GitHub Actions automates test execution and deployment 

Flexibility - Tests are executed dynamically during CI/CD but skipped in Production 

Scalability - New tests can be added without modifying Production Code 

Modularity- All test Logic resides in QA  Automation Test Framework, reducing duplication 
