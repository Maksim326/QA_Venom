### Introduction
This proposal outlines the design and implementation of a QA Automation Test Framework for Data Flow testing. The framework ensures that each step in the pipeline is verified during execution while allowing seamless execution in production without tests.

### Objective
- Automate tests for key pipeline steps (file received, file upload, raw table validation, transformation steps).
- Centralize all test logic in a dedicated repository.
- Ensure that tests run only during CI/CD execution while being skipped in production.
- Use GitHub Actions for continuous integration and deployment.

### Overview
The framework consists of three GitHub repositories:
1. **DataPlatform-OrchestrationFunction** – For Azure functions.
2. **DataPlatform-Python** – Contains all pipeline steps and pipeline validations.
3. **QA Automation Test Framework** (not created yet).

### Implementation Steps
#### Test Files
- Test files will be stored in dedicated blob storage and used for test execution.
- Test files will be uploaded to the inbound folder (Azure function will provide information about test file location via `construct_event_data`).

#### GitHub Actions Integration
- GitHub Actions will automate the testing process.

#### Deploy Pipeline Repositories
- If the test repository is available, it loads and executes tests.
- If running in production, tests are skipped.

#### Skipping Tests in Production
- If running in a production environment, tests will not be applied.
- The pipeline will execute without interruption from tests.

### Framework Benefits
- **Automation** – GitHub Actions automates test execution and deployment.
- **Flexibility** – Tests are executed dynamically during CI/CD but skipped in production.
- **Scalability** – New tests can be added without modifying production code.
- **Modularity** – All test logic resides in the QA Automation Test Framework, reducing duplication.

### Including Notes
#### Data Pipeline & Event Hub Testing Framework
##### Launch Strategy
- Trigger through Fabric schedule.
- Place the files in the test path.
- File gets dropped at the test path.
- File dropped event is created.
- Correlation ID:
  - Get correlation ID based on file path in the Event Hub.
  - File path triggers Azure function initiation.
  - Azure file movement event occurs.
  - **Config.json:**
    - Get event for the correlation ID.
    - Run tests for the Azure functions.

##### Raw Table Load
- Correlation ID:
  - Publish event with raw table load.
  - File path triggers event retrieval for the correlation ID.
  - Run tests for the raw table load.

### Skipping Azure/Fabric Repositories
- Tests will be executed from the QA Automation Test Framework repository and will look for the corresponding ID from Azure functions.

